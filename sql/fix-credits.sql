-- 创建或替换increment函数
CREATE OR REPLACE FUNCTION increment(x INTEGER)
RETURNS INTEGER AS $$
BEGIN
  -- 简单返回传入的整数加1
  RETURN x + 1;
END;
$$ LANGUAGE plpgsql;

-- 创建或替换decrement函数
CREATE OR REPLACE FUNCTION decrement(x INTEGER)
RETURNS INTEGER AS $$
BEGIN
  -- 简单返回传入的整数减1
  RETURN x - 1;
END;
$$ LANGUAGE plpgsql;

-- 创建安全的点数减少函数（确保不会减到负数）
CREATE OR REPLACE FUNCTION safe_decrement_credits(user_id_param UUID)
RETURNS INTEGER AS $$
DECLARE
  current_credits INTEGER;
  updated_credits INTEGER;
BEGIN
  -- 获取当前点数
  SELECT credits INTO current_credits
  FROM ai_images_creator_credits
  WHERE user_id = user_id_param;
  
  -- 如果没有找到记录或点数为空，返回0
  IF current_credits IS NULL THEN
    RETURN 0;
  END IF;
  
  -- 计算新点数，确保不低于0
  updated_credits := GREATEST(0, current_credits - 1);
  
  -- 更新点数
  UPDATE ai_images_creator_credits
  SET credits = updated_credits
  WHERE user_id = user_id_param;
  
  -- 返回更新后的点数
  RETURN updated_credits;
END;
$$ LANGUAGE plpgsql;

-- 创建安全的点数增加函数
CREATE OR REPLACE FUNCTION safe_increment_credits(user_id_param UUID)
RETURNS INTEGER AS $$
DECLARE
  current_credits INTEGER;
  updated_credits INTEGER;
BEGIN
  -- 获取当前点数
  SELECT credits INTO current_credits
  FROM ai_images_creator_credits
  WHERE user_id = user_id_param;
  
  -- 如果没有找到记录或点数为空，默认设置为0
  IF current_credits IS NULL THEN
    current_credits := 0;
  END IF;
  
  -- 计算新点数
  updated_credits := current_credits + 1;
  
  -- 更新点数
  UPDATE ai_images_creator_credits
  SET credits = updated_credits
  WHERE user_id = user_id_param;
  
  -- 如果没有更新任何行（用户可能不存在）
  IF NOT FOUND THEN
    -- 插入一条新记录
    INSERT INTO ai_images_creator_credits (user_id, credits)
    VALUES (user_id_param, 1);
    RETURN 1;
  END IF;
  
  -- 返回更新后的点数
  RETURN updated_credits;
END;
$$ LANGUAGE plpgsql;

-- 确保ai_images_creator_credits表存在
CREATE TABLE IF NOT EXISTS ai_images_creator_credits (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  credits INTEGER NOT NULL DEFAULT 3,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- 创建唯一索引确保每个用户只有一条记录
CREATE UNIQUE INDEX IF NOT EXISTS idx_ai_images_creator_credits_user_id 
ON ai_images_creator_credits(user_id);

-- 添加行级安全策略
ALTER TABLE ai_images_creator_credits ENABLE ROW LEVEL SECURITY;

-- 创建只允许用户查看自己点数的策略
CREATE POLICY IF NOT EXISTS "Users can view their own credits"
  ON ai_images_creator_credits
  FOR SELECT
  USING (auth.uid() = user_id);

-- 创建只允许服务器角色更新点数的策略
CREATE POLICY IF NOT EXISTS "Only service role can update credits"
  ON ai_images_creator_credits
  FOR UPDATE
  USING (true);  -- 使用service_role时绕过RLS 