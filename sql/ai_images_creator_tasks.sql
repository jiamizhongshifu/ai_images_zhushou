-- ai_images_creator_tasks.sql
-- 创建任务表用于异步处理图像生成请求

CREATE TABLE IF NOT EXISTS ai_images_creator_tasks (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  task_id TEXT NOT NULL UNIQUE, -- 任务唯一标识符，返回给前端
  status TEXT NOT NULL CHECK (status IN ('pending', 'processing', 'completed', 'failed', 'cancelled')),
  prompt TEXT,
  image_base64 TEXT, -- 原始输入图片（如果有）
  style TEXT,
  result_url TEXT, -- 生成结果URL
  error_message TEXT, -- 如果失败，记录错误信息
  credits_deducted BOOLEAN DEFAULT false, -- 是否已扣除点数
  credits_refunded BOOLEAN DEFAULT false, -- 是否已退还点数
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  completed_at TIMESTAMP WITH TIME ZONE,
  
  -- 任务处理的元数据
  processing_started_at TIMESTAMP WITH TIME ZONE,
  model_used TEXT,
  extra_data JSONB -- 存储其他相关数据
);

-- 添加索引以提高查询性能
CREATE INDEX IF NOT EXISTS idx_ai_images_creator_tasks_user_id ON ai_images_creator_tasks(user_id);
CREATE INDEX IF NOT EXISTS idx_ai_images_creator_tasks_task_id ON ai_images_creator_tasks(task_id);
CREATE INDEX IF NOT EXISTS idx_ai_images_creator_tasks_status ON ai_images_creator_tasks(status);
CREATE INDEX IF NOT EXISTS idx_ai_images_creator_tasks_created_at ON ai_images_creator_tasks(created_at);

-- 添加行级安全策略
ALTER TABLE ai_images_creator_tasks ENABLE ROW LEVEL SECURITY;

-- 创建只允许用户查看自己任务的策略
CREATE POLICY "Users can view their own tasks"
  ON ai_images_creator_tasks
  FOR SELECT
  USING (auth.uid() = user_id);

-- 创建触发器函数，自动更新updated_at
CREATE OR REPLACE FUNCTION update_tasks_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- 创建触发器
CREATE TRIGGER update_ai_images_creator_tasks_updated_at
    BEFORE UPDATE ON ai_images_creator_tasks
    FOR EACH ROW
    EXECUTE FUNCTION update_tasks_updated_at_column();

-- 创建函数，当任务完成时自动记录完成时间
CREATE OR REPLACE FUNCTION set_task_completed_time()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.status = 'completed' AND OLD.status != 'completed' THEN
        NEW.completed_at = TIMEZONE('utc'::text, NOW());
    END IF;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- 创建触发器
CREATE TRIGGER set_task_completed_time_trigger
    BEFORE UPDATE ON ai_images_creator_tasks
    FOR EACH ROW
    EXECUTE FUNCTION set_task_completed_time(); 