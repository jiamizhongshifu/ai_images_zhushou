-- ai_images_creator_credits.sql
-- 创建用户点数表
CREATE TABLE IF NOT EXISTS ai_images_creator_credits (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  credits INTEGER NOT NULL DEFAULT 5,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  
  CONSTRAINT unique_user_id UNIQUE (user_id)
);

-- 添加行级安全策略
ALTER TABLE ai_images_creator_credits ENABLE ROW LEVEL SECURITY;

-- 创建只允许用户查看自己记录的策略
CREATE POLICY "Users can view their own credits"
  ON ai_images_creator_credits
  FOR SELECT
  USING (auth.uid() = user_id);

-- 创建允许插入新记录的策略
CREATE POLICY "New users can insert their initial credits"
  ON ai_images_creator_credits
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);

-- 创建允许用户更新自己记录的策略
CREATE POLICY "Users can update their own credits"
  ON ai_images_creator_credits
  FOR UPDATE
  USING (auth.uid() = user_id);

-- 创建触发器函数，在用户注册时自动添加初始点数
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.ai_images_creator_credits (user_id, credits)
  VALUES (NEW.id, 5);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 创建触发器，在用户注册后自动执行
CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();