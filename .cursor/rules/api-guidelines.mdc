---
description:
globs:
alwaysApply: false
---
# API调用规范

## 基本原则
1. 使用统一的请求客户端
2. 接口调用使用异步函数
3. 实现错误处理和超时控制
4. 遵循RESTful API设计规范

## 实现方式
1. 统一使用`fetch`或axios进行请求
2. 请求参数和响应数据使用TypeScript类型定义
3. 处理网络错误和业务错误
4. 实现请求缓存和防抖/节流

## API函数示例
```tsx
interface ApiResponse<T> {
  code: number;
  message: string;
  data: T;
}

interface ImageItem {
  id: string;
  url: string;
  createTime: string;
}

export async function fetchImages(page: number, size: number): Promise<ImageItem[]> {
  try {
    const response = await fetch(`/api/images?page=${page}&size=${size}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`请求失败: ${response.status}`);
    }
    
    const result: ApiResponse<ImageItem[]> = await response.json();
    
    if (result.code !== 0) {
      throw new Error(result.message || '请求错误');
    }
    
    return result.data;
  } catch (error) {
    console.error('获取图片列表失败:', error);
    throw error;
  }
}

export async function deleteImage(id: string): Promise<boolean> {
  try {
    const response = await fetch(`/api/images/${id}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`删除失败: ${response.status}`);
    }
    
    const result: ApiResponse<null> = await response.json();
    
    if (result.code !== 0) {
      throw new Error(result.message || '删除错误');
    }
    
    return true;
  } catch (error) {
    console.error('删除图片失败:', error);
    throw error;
  }
}
