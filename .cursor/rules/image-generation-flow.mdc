---
description:
globs:
alwaysApply: false
---
# 图像生成流程

## 核心组件

图像生成系统由以下主要部分组成：

- 客户端生成请求：通过 `useImageGeneration` hook 发起
- 服务器端任务创建：将请求转换为异步任务
- 任务状态监听器：实时更新任务状态和进度
- 结果处理和展示：完成后加载图像和相关操作

## 关键文件

- [hooks/useImageGeneration.ts](mdc:hooks/useImageGeneration.ts) - 图像生成核心 hook
- [app/api/generate-image-task/route.ts](mdc:app/api/generate-image-task/route.ts) - 图像任务创建 API
- [app/api/image-task-status/route.ts](mdc:app/api/image-task-status/route.ts) - 任务状态查询 API
- [app/components/TaskStatusListener.tsx](mdc:app/components/TaskStatusListener.tsx) - 任务状态监听组件
- [utils/image/uploadImageToStorage.ts](mdc:utils/image/uploadImageToStorage.ts) - 图片上传与URL转换工具

## 图像生成流程

1. 用户在前端填写提示词和上传图片，选择风格
2. 点击生成按钮，调用 `useImageGeneration.generateImage()`
3. 前端发送 POST 请求到 `/api/generate-image-task`
4. 后端创建任务记录，返回 `taskId`
5. 前端使用 `TaskStatusListener` 组件监听任务状态变化
6. 后端异步处理任务，更新任务状态和进度
7. 任务完成后，前端加载生成的图像并更新 UI

## 任务状态流转

任务状态遵循以下流转：
```
pending -> processing -> completed
      \-> failed
```

- `pending`: 任务已创建，等待处理
- `processing`: 任务正在处理中，有进度更新
- `completed`: 任务成功完成，有图像 URL
- `failed`: 任务失败，有错误信息

## 图片处理技术细节

### 图片格式转换与优化

1. **Base64转URL机制**：
   - 使用`ensureImageUrl`函数自动检测输入是base64还是URL
   - 对base64图片上传至存储服务，返回URL供API使用
   - 优先使用URL而非base64，减少数据传输量和内存占用

2. **比例检测与标准化**：
   - 自动检测上传图片的宽高比(`aspectRatio`)
   - 智能匹配最接近的标准比例(横屏1792x1024，竖屏1024x1792，方形1024x1024)
   - 为API提供标准化比例信息，提高生成质量

### API请求构建

1. **消息格式控制**：
   - 根据场景使用不同消息结构(文本/多模态/JSON)
   - 处理参考图片gen_id的特殊情况
   - 使用system message防止提示词被过度扩展

2. **提示词模板**:
   ```javascript
   // 添加system message指导模型行为
   const systemMessage: {role: 'system'; content: string} = {
     role: 'system',
     content: '请严格按照用户的原始提示词生成图像，不要扩展、重写或修改提示词。保持用户意图的原始性。'
   };
   ```

3. **API响应处理**:
   - 从流式响应中解析进度信息和最终图片URL
   - 支持多种URL格式提取模式，兼容不同API输出格式
   - 使用正则表达式从Markdown格式响应中提取图片URL

## 处理中断和恢复

系统支持任务中断和恢复机制：

1. 页面刷新或关闭时，任务继续在后台处理
2. 重新打开页面时，通过 `TaskRecoveryDialog` 恢复未完成的任务
3. 使用 `localStorage` 缓存任务信息，支持跨会话恢复

## 错误处理

图像生成系统包含多层错误处理：

1. API 层错误：
   - 网络连接超时(ETIMEDOUT)问题处理
   - 请求参数验证与错误提示
   - API响应解析错误处理

2. 任务处理错误：
   - AI 服务不可用时的优雅降级
   - 生成失败的详细日志与分析
   - 基于错误类型的智能重试逻辑

3. 客户端显示错误：
   - 图像加载失败的备选方案
   - 状态异常的自动恢复
   - 用户友好的错误提示

每个错误类型都有对应的处理策略和用户反馈机制。

## 日志与监控

1. **结构化日志**:
   - 每个任务有唯一ID用于全链路跟踪
   - 使用前缀标记不同模块日志(`[图片任务]`, `[TaskStatus API]`)
   - 敏感信息(图片数据、API密钥)自动截断

2. **性能监控**:
   - 记录关键操作耗时(API请求、图片处理、总任务时间)
   - 状态转换事件记录
   - 资源使用情况监控

## 最佳实践

1. 总是处理任务的所有可能状态
2. 提供清晰的进度和错误反馈
3. 实现适当的重试和恢复机制
4. 缓存生成结果，避免重复请求
5. 确保任务失败时正确释放资源（例如退还积分）
6. 优先使用URL而非base64数据传输图片
7. 使用system message控制AI模型行为
8. 实现全链路日志追踪，便于调试与性能优化
